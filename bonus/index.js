import { multiplyPr } from '../PromisedHomework/binary.js'

function testAsyncFunc() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (Math.random() * 50 > 25) {
                return reject('–û—à–∏–±–∫–∞ ‚õî')
            }

            resolve('–í—Å–µ –æ–∫ üëç')
        }, Math.random() * 20);
    })
}

// --------------------------------------------------
// –ü—Ä–æ–º–∏—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
// --------------------------------------------------
const promises = [
    multiplyPr(1, 1),
    multiplyPr(2, 5),
    multiplyPr(5, 5),
    testAsyncFunc()
]

// --------------------------------------------------
// Promise._any()
// --------------------------------------------------
Promise.any(promises).then(result => {
    console.log('–ù–∞—Ç–∏–≤–Ω—ã–π Promise.any()')
    console.log(result)
}).catch(err => {
    console.log(err)
})

Promise._any(promises).then(result => {
    console.log('–ú–æ–π Promise._any()')
    console.log(result)
}).catch(err => {
    console.log(err)
})

// --------------------------------------------------
// Promise._allSettled()
// --------------------------------------------------
Promise.allSettled(promises).then(data => {
    console.log('–ù–∞—Ç–∏–≤–Ω—ã–π Promise.allSettled()')
    console.table(data)
})

Promise._allSettled(promises).then(data => {
    console.log('–ú–æ–π Promise._allSettled()')
    console.table(data)
})

// --------------------------------------------------
// Promise._finally()
// --------------------------------------------------
testAsyncFunc()._finally(() => {
    console.log('–Ø –∑–∞–≤–µ—Ä—à–∏–ª—Å—è: –ú–æ–π _finally()')
}).finally(() => {
    console.log('–Ø –∑–∞–≤–µ—Ä—à–∏–ª—Å—è: –ù–∞—Ç–∏–≤–Ω—ã–π finally()')
})